changes for ebof board

diff --git a/drivers/net/ethernet/intel/intel-igb/e1000_api.c b/drivers/net/ethernet/intel/intel-igb/e1000_api.c
index 2e4444f..b0fa862 100644
--- a/drivers/net/ethernet/intel/intel-igb/e1000_api.c
+++ b/drivers/net/ethernet/intel/intel-igb/e1000_api.c
@@ -86,6 +86,7 @@ s32 e1000_init_nvm_params(struct e1000_hw *hw)
 s32 e1000_init_phy_params(struct e1000_hw *hw)
 {
 	s32 ret_val = E1000_SUCCESS;
+	return E1000_SUCCESS;
 
 	if (hw->phy.ops.init_params) {
 		ret_val = hw->phy.ops.init_params(hw);
@@ -436,6 +437,7 @@ s32 e1000_reset_hw(struct e1000_hw *hw)
  **/
 s32 e1000_init_hw(struct e1000_hw *hw)
 {
+	return E1000_SUCCESS;
 	if (hw->mac.ops.init_hw)
 		return hw->mac.ops.init_hw(hw);
 
diff --git a/drivers/net/ethernet/intel/intel-igb/igb_main.c b/drivers/net/ethernet/intel/intel-igb/igb_main.c
index 466ea85..6c9d242 100644
--- a/drivers/net/ethernet/intel/intel-igb/igb_main.c
+++ b/drivers/net/ethernet/intel/intel-igb/igb_main.c
@@ -4724,6 +4724,7 @@ bool igb_has_link(struct igb_adapter *adapter)
 {
 	struct e1000_hw *hw = &adapter->hw;
 	bool link_active = FALSE;
+	return true;
 
 	/* get_link_status is set on LSC (link status) interrupt or
 	 * rx sequence error interrupt.  get_link_status will stay
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
index f45caae..a1c5b74 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
@@ -7105,6 +7105,46 @@ static int ixgbe_open(struct net_device *netdev)
 #elif defined(HAVE_VXLAN_RX_OFFLOAD)
 	vxlan_get_rx_port(netdev);
 #endif /* HAVE_UDP_ENC_RX_OFFLOAD */
+
+	if (adapter->hw.device_id == IXGBE_DEV_ID_X550EM_A_SGMII_L) {
+		struct ixgbe_hw ext_hw;
+		struct ixgbe_hw *hw_p = &ext_hw;
+		memcpy(hw_p, &adapter->hw, sizeof(struct ixgbe_hw));
+		hw_p->phy.addr = 0x09;
+		hw_p->phy.ops.write_reg(hw_p, 0x00, 0x00, 0x104A);
+		msec_delay(50);
+		hw_p->phy.addr = 0x05;
+		hw_p->phy.ops.write_reg(hw_p, 0x1A, 0x1A, 0xA100);
+		msec_delay(50);
+		hw_p->phy.addr = 0x04;
+		hw_p->phy.ops.write_reg(hw_p, 0x1A, 0x1A, 0xFC80);
+		msec_delay(50);
+		hw_p->phy.addr = 0x04;
+		hw_p->phy.ops.write_reg(hw_p, 0x00, 0x00, 0x100A);
+		msec_delay(50);
+		hw_p->phy.addr = 0x05;
+		hw_p->phy.ops.write_reg(hw_p, 0x1A, 0x1A, 0x0A02);
+		msec_delay(50);
+		hw_p->phy.addr = 0x04;
+		hw_p->phy.ops.write_reg(hw_p, 0x1A, 0x1A, 0xFC82);
+		msec_delay(50);
+		hw_p->phy.addr = 0x1C;
+		hw_p->phy.ops.write_reg(hw_p, 0x19, 0x19, 0x2000);
+		msec_delay(50);
+		hw_p->phy.addr = 0x1C;
+		hw_p->phy.ops.write_reg(hw_p, 0x18, 0x18, 0x8284);
+		msec_delay(50);
+		hw_p->phy.addr = 0x1C;
+		hw_p->phy.ops.write_reg(hw_p, 0x19, 0x19, 0x9340);
+		msec_delay(50);
+		hw_p->phy.addr = 0x1C;
+		hw_p->phy.ops.write_reg(hw_p, 0x18, 0x18, 0x8684);
+		msec_delay(50);
+		hw_p->phy.addr = 0x04;
+		hw_p->phy.ops.write_reg(hw_p, 0x04, 0x04, 0x007F);
+		msec_delay(50);
+	}
+
 	return IXGBE_SUCCESS;
 
 err_set_queues:
diff --git a/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c b/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c
index 2b366d9..07552ce 100644
--- a/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c
+++ b/drivers/net/ethernet/intel/ixgbe/ixgbe_x550.c
@@ -584,8 +584,6 @@ static s32 ixgbe_identify_phy_fw(struct ixgbe_hw *hw)
 		hw->phy.phy_semaphore_mask = IXGBE_GSSR_PHY0_SM;
 
 	hw->phy.type = ixgbe_phy_fw;
-	hw->phy.ops.read_reg = NULL;
-	hw->phy.ops.write_reg = NULL;
 	return ixgbe_get_phy_id_fw(hw);
 }
 
@@ -2364,10 +2362,11 @@ s32 ixgbe_init_phy_ops_X550em(struct ixgbe_hw *hw)
 	switch (hw->device_id) {
 	case IXGBE_DEV_ID_X550EM_A_1G_T:
 	case IXGBE_DEV_ID_X550EM_A_1G_T_L:
-		phy->ops.read_reg_mdi = NULL;
-		phy->ops.write_reg_mdi = NULL;
-		hw->phy.ops.read_reg = NULL;
-		hw->phy.ops.write_reg = NULL;
+	case IXGBE_DEV_ID_X550EM_A_SGMII_L:
+		phy->ops.read_reg_mdi = ixgbe_read_phy_reg_mdi_22;
+		phy->ops.write_reg_mdi = ixgbe_write_phy_reg_mdi_22;
+		hw->phy.ops.read_reg = ixgbe_read_phy_reg_x550a;
+		hw->phy.ops.write_reg = ixgbe_write_phy_reg_x550a;
 		phy->ops.check_overtemp = ixgbe_check_overtemp_fw;
 		if (hw->bus.lan_id)
 			hw->phy.phy_semaphore_mask |= IXGBE_GSSR_PHY1_SM;
