From e4f4ff6b680e2233871a24b13be29c7485eaf6d9 Mon Sep 17 00:00:00 2001
From: Wolf Lin <Wolf_Lin@pegatroncorp.com>
Date: Thu, 9 Apr 2020 11:19:26 +0800
Subject: [PATCH] Avoid PHY reset during system rebooting

---
 drivers/net/ethernet/intel/igb/bcm_phy.c     |  6 +++
 drivers/net/ethernet/intel/igb/e1000_82575.c | 20 ++++++++++
 drivers/net/ethernet/intel/igb/e1000_82575.h |  2 +
 drivers/net/ethernet/intel/igb/e1000_phy.c   | 42 ++++++++++++++++++++
 drivers/net/ethernet/intel/igb/igb_main.c    | 16 ++++++--
 5 files changed, 82 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/intel/igb/bcm_phy.c b/drivers/net/ethernet/intel/igb/bcm_phy.c
index 7f3d81a1fc7d..af9882480da9 100644
--- a/drivers/net/ethernet/intel/igb/bcm_phy.c
+++ b/drivers/net/ethernet/intel/igb/bcm_phy.c
@@ -1,4 +1,5 @@
 #include "e1000_hw.h"
+#include "e1000_82575.h"
 
 /*
  * 1000Base-T Control Register
@@ -259,6 +260,11 @@ int bcm54616_config_init(struct e1000_hw *hw)
     u16 regval;
     int i;
     //int reg;
+    u32 status;
+
+    status = bmc_is_available();
+    if (status)
+        return 0;
 
     /* reset PHY */
     regval = (1<<15);
diff --git a/drivers/net/ethernet/intel/igb/e1000_82575.c b/drivers/net/ethernet/intel/igb/e1000_82575.c
index 486f8a63df4e..c977e537deb0 100644
--- a/drivers/net/ethernet/intel/igb/e1000_82575.c
+++ b/drivers/net/ethernet/intel/igb/e1000_82575.c
@@ -30,6 +30,7 @@
 #include <linux/types.h>
 #include <linux/if_ether.h>
 #include <linux/i2c.h>
+#include <linux/module.h>
 
 #include "e1000_mac.h"
 #include "e1000_82575.h"
@@ -73,11 +74,23 @@ static s32 igb_update_nvm_checksum_i350(struct e1000_hw *hw);
 static const u16 e1000_82580_rxpbs_table[] = {
 	36, 72, 144, 1, 2, 4, 8, 16, 35, 70, 140 };
 
+static int bmc_available = 0;
+module_param(bmc_available, int, S_IRUGO);
+MODULE_PARM_DESC(bmc_available, "bmc_available - 0 disable; 1 enable;");
+
 /* Due to a hw errata, if the host tries to  configure the VFTA register
  * while performing queries from the BMC or DMA, then the VFTA in some
  * cases won't be written.
  */
 
+u32 bmc_is_available(void)
+{
+	if (bmc_available)
+		return 1;
+
+	return 0;
+}
+
 /**
  *  igb_write_vfta_i350 - Write value to VLAN filter table
  *  @hw: pointer to the HW structure
@@ -962,6 +975,7 @@ static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw)
 {
 	struct e1000_phy_info *phy = &hw->phy;
 	s32 ret_val;
+	u32 status;
 
 	/* This isn't a true "hard" reset, but is the only reset
 	 * available to us at this time.
@@ -969,6 +983,12 @@ static s32 igb_phy_hw_reset_sgmii_82575(struct e1000_hw *hw)
 
 	hw_dbg("Soft resetting SGMII attached PHY...\n");
 
+	status = bmc_is_available();
+	if (status) {
+		ret_val = 0;
+		goto out;
+	}
+
 	/* SFP documentation requires the following to configure the SPF module
 	 * to work on SGMII.  No further documentation is given.
 	 */
diff --git a/drivers/net/ethernet/intel/igb/e1000_82575.h b/drivers/net/ethernet/intel/igb/e1000_82575.h
index acf06051e111..ffdeb73ef4af 100644
--- a/drivers/net/ethernet/intel/igb/e1000_82575.h
+++ b/drivers/net/ethernet/intel/igb/e1000_82575.h
@@ -261,6 +261,8 @@ struct e1000_adv_tx_context_desc {
 
 #define ALL_QUEUES   0xFFFF
 
+u32 bmc_is_available(void);
+
 /* RX packet buffer size defines */
 #define E1000_RXPBS_SIZE_MASK_82576  0x0000007F
 void igb_vmdq_set_anti_spoofing_pf(struct e1000_hw *, bool, int);
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.c b/drivers/net/ethernet/intel/igb/e1000_phy.c
index 4c9290635233..e4ffd99e6d21 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.c
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.c
@@ -26,6 +26,7 @@
 
 #include "e1000_mac.h"
 #include "e1000_phy.h"
+#include "e1000_82575.h"
 
 static s32  igb_phy_setup_autoneg(struct e1000_hw *hw);
 static void igb_phy_force_speed_duplex_setup(struct e1000_hw *hw,
@@ -661,10 +662,15 @@ s32 igb_copper_link_setup_m88_gen2(struct e1000_hw *hw)
 	struct e1000_phy_info *phy = &hw->phy;
 	s32 ret_val;
 	u16 phy_data;
+	u32 status;
 
 	if (phy->reset_disable)
 		return 0;
 
+	status = bmc_is_available();
+	if (status)
+		return 0;
+
 	/* Enable CRS on Tx. This must be set for half-duplex operation. */
 	ret_val = phy->ops.read_reg(hw, M88E1000_PHY_SPEC_CTRL, &phy_data);
 	if (ret_val)
@@ -894,6 +900,14 @@ static s32 igb_copper_link_autoneg(struct e1000_hw *hw)
 	struct e1000_phy_info *phy = &hw->phy;
 	s32 ret_val;
 	u16 phy_ctrl;
+	u32 status;
+
+	status = bmc_is_available();
+	if (status) {
+		hw->mac.get_link_status = true;
+		ret_val = 0;
+		goto out;
+	}
 
 	/* Perform some bounds checking on the autoneg advertisement
 	 * parameter.
@@ -958,6 +972,13 @@ static s32 igb_phy_setup_autoneg(struct e1000_hw *hw)
 	s32 ret_val;
 	u16 mii_autoneg_adv_reg;
 	u16 mii_1000t_ctrl_reg = 0;
+	u32 status;
+
+	status = bmc_is_available();
+	if (status) {
+		ret_val = 0;
+		goto out;
+	}
 
 	phy->autoneg_advertised &= phy->autoneg_mask;
 
@@ -2171,6 +2192,13 @@ s32 igb_phy_sw_reset(struct e1000_hw *hw)
 {
 	s32 ret_val = 0;
 	u16 phy_ctrl;
+	u32 status;
+
+	status = bmc_is_available();
+	if (status) {
+		ret_val = 0;
+		goto out;
+	}
 
 	if (!(hw->phy.ops.read_reg))
 		goto out;
@@ -2204,6 +2232,13 @@ s32 igb_phy_hw_reset(struct e1000_hw *hw)
 	struct e1000_phy_info *phy = &hw->phy;
 	s32  ret_val;
 	u32 ctrl;
+	u32 status;
+
+	status = bmc_is_available();
+	if (status) {
+		ret_val = 0;
+		goto out;
+	}
 
 	ret_val = igb_check_reset_block(hw);
 	if (ret_val) {
@@ -2377,6 +2412,13 @@ s32 igb_initialize_M88E1512_phy(struct e1000_hw *hw)
 	struct e1000_phy_info *phy = &hw->phy;
 	s32 ret_val = 0;
 	u16 mii_reg = 0;
+	u32 status = 0;
+
+	status = bmc_is_available();
+	if (status) {
+		ret_val = 0;
+		goto out;
+	}
 
 	ret_val = phy->ops.write_reg(hw, E1000_M88E1543_PAGE_ADDR, 0x3);
 	if (ret_val)
diff --git a/drivers/net/ethernet/intel/igb/igb_main.c b/drivers/net/ethernet/intel/igb/igb_main.c
index be21baa32f38..0a85e8e80294 100644
--- a/drivers/net/ethernet/intel/igb/igb_main.c
+++ b/drivers/net/ethernet/intel/igb/igb_main.c
@@ -1872,7 +1872,7 @@ void igb_reset(struct igb_adapter *adapter)
 	struct e1000_hw *hw = &adapter->hw;
 	struct e1000_mac_info *mac = &hw->mac;
 	struct e1000_fc_info *fc = &hw->fc;
-	u32 pba, hwm;
+	u32 pba, hwm, status;
 
 	/* Repartition Pba for greater than 9k mtu
 	 * To take effect CTRL.RST is required.
@@ -2022,8 +2022,12 @@ void igb_reset(struct igb_adapter *adapter)
 			break;
 		}
 	}
-	if (!netif_running(adapter->netdev))
-		igb_power_down_link(adapter);
+
+	status = bmc_is_available();
+	if (!status) {
+		if (!netif_running(adapter->netdev))
+			igb_power_down_link(adapter);
+	}
 
 	igb_update_mng_vlan(adapter);
 
@@ -7555,12 +7559,16 @@ static int __igb_shutdown(struct pci_dev *pdev, bool *enable_wake,
 	struct net_device *netdev = pci_get_drvdata(pdev);
 	struct igb_adapter *adapter = netdev_priv(netdev);
 	struct e1000_hw *hw = &adapter->hw;
-	u32 ctrl, rctl, status;
+	u32 ctrl, rctl, status, bmc_status;
 	u32 wufc = runtime ? E1000_WUFC_LNKC : adapter->wol;
 #ifdef CONFIG_PM
 	int retval = 0;
 #endif
 
+	bmc_status = bmc_is_available();
+	if (bmc_status)
+		return 0;
+
 	rtnl_lock();
 	netif_device_detach(netdev);
 
-- 
2.17.1

